openapi: 3.0.0
servers:
  - url: 'https://dev.api.0x10.kr/api/v1'

info:
  description: >-
    유저에 대한 여러가지 정보를 조회하기 위한 API 스펙 정보입니다. 기본 로그인 권한부터 사용이 가능합니다.
  version: 1.0.0
  title: 유저 조회 API 스펙

tags:
  - name: users
    description: 이용자(유저) 계정 및 정보에 대한 태그입니다.
  - name: cards
    description: 이용자(유저)의 카드 정보에 대한 태그입니다.

paths:
  /users:
    get:
      tags:
        - users
      summary: 이용자 계정 목록 조회
      description : 이용자 계정 목록을 가져오며, 조회를 위해서는 로그인이 필요합니다.
      parameters:
        - name: page
          in: query
          description: Pagination 되어 결과를 조회할 때, 전체 쿼리 중 몇 번째 페이지일지 결정하는 필터입니다.
          required: false
          style: form
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: pageSize
          in: query
          description: Pagination 되어 결과를 조회할 때, 페이지당 데이터 배열의 개수를 설정하는 필터입니다.
          required: false
          style: form
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: email
          in: query
          description: 조회하고자 하는 유저의 이메일을 특정할 수 있는 필터입니다.
          required: false
          style: form
          schema:
            type: string
        - name: nickname
          in: query
          description: 조회하고자 하는 유저의 닉네임을 특정할 수 있는 필터입니다.
          required: false
          style: form
          schema:
            type: string
        - name: phoneNumber
          in: query
          description: 조회하고자 하는 유저의 휴대폰번호를 특정할 수 있는 필터입니다.
          required: false
          style: form
          schema:
            type: string
        - name: isEnabled
          in: query
          description: 유저 활성화 여부를 특정할 수 있는 필터입니다.
          required: false
          style: form
          schema:
            type: boolean
            enum:
            - true
            - false
      responses:
        '200':
          description: Pagination 된 유저 정보 응답값
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Users"
    post:
      tags:
        - users
      summary: 이용자 계정 생성
      description : 이용자 계정을 생성합니다. 계정 생성 시 비밀번호 입력 확인의 경우 프론트에서 검증합니다.
      requestBody:
        $ref: "#components/requestBodies/User"
      responses:
        '200':
          description: 생성된 유저의 최소 데이터를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/User"
        '400':
          description: 값을 잘못 입력할 경우 에러를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Error"
                type: object
        '409':
          description: 이미 유저 계정이 동일한 게 존재할 경우 에러를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Error"
                type: object

  /users/{userId}:
    get:
      tags:
        - users
      summary: 이용자 계정 상세정보 조회
      description : 이용자 계정의 상세정보를 가져오며, 조회를 위해서는 로그인이 필요합니다.
      parameters:
        - name: userId
          in: path
          description: 조회하고자 하는 유저의 아이디값을 입력합니다.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: 유저의 상세 정보를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/UserWithCard"
                type: object
        '404':
          description: 찾을 수 없는 유저를 조회할 때 에러 반환
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Error"
                type: object

  /users/{userId}/cards:
    get:
      tags:
        - users
      summary: 이용자가 발급한 카드 목록 조회
      description : 이용자 계정에 해당하는 발급된 카드 목록을 가져옵니다.
      parameters:
        - name: userId
          in: path
          description: 조회하고자 하는 유저의 아이디값을 입력합니다.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: status
          in: query
          style: form
          description: 조회하고자 하는 카드의 상태를 입력합니다.
          schema:
            type: boolean
            example: true
            enum:
            - true
            - false
      responses:
        '200':
          description: Pagination 된 유저 정보 응답값
          content:
            application/json:
              schema:
                $ref: "#components/schemas/UserCards"
  /cards:
    get:
      tags:
        - cards
      summary: 카드 목록 조회
      description : 이용자의 카드 목록을 가져오며, 조회를 위해서는 로그인이 필요합니다.
      parameters:
        - name: page
          in: query
          description: Pagination 되어 결과를 조회할 때, 전체 쿼리 중 몇 번째 페이지일지 결정하는 필터입니다.
          required: false
          style: form
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: pageSize
          in: query
          description: Pagination 되어 결과를 조회할 때, 페이지당 데이터 배열의 개수를 설정하는 필터입니다.
          required: false
          style: form
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: status
          in: query
          description: 조회하고자 하는 카드의 상태값을 선택하는 필터입니다.
          required: false
          style: form
          schema:
            type: boolean
            enum:
            - true
            - false
        - name: phoneNumber
          in: query
          description: 조회하고자 하는 카드를 소유한 유저의 휴대폰번호를 특정할 수 있는 필터입니다.
          required: false
          style: form
          schema:
            type: string
      responses:
        '200':
          description: Pagination 된 유저 정보 응답값
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Cards"
    post:
      tags:
        - cards
      summary: 이용자 카드 등록
      description : 이용자의 카드를 등록합니다. 등록 과정에서 카드의 상세 정보(이름, 키 등)는 백엔드에서 처리하여 등록하게 됩니다.
      requestBody:
        $ref: "#components/requestBodies/Card"
      responses:
        '200':
          description: 생성된 유저의 최소 데이터를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Card"
        '400':
          description: 값을 잘못 입력할 경우 에러를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Error"
                type: object
        '409':
          description: 이미 동일한 카드가 존재할 경우 에러를 반환합니다.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Error"
                type: object
  /cards/{cardId}:
    get:
      tags:
        - cards
      summary: 카드 상세정보 조회
      description : 카드 아이디에 해당하는 상세정보를 가져옵니다.
      parameters:
        - name: cardId
          in: path
          description: 카드 정보를 조회하기 위한 카드 아이디를 입력합니다.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: 카드의 상세 정보를 가져옵니다. 유저 정보 응답값
          content:
            application/json:
              schema:
                $ref: "#components/schemas/CardDetail"
        '404':
          description: 조회할 데이터를 찾을 수 없는 경우
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Error"
                type: object
components:
  requestBodies:
    Card:
      content:
        application/json:
          schema:
            type: object
            required:
              - alias
              - cardName
              - cardNumber
            properties:
              alias:
                type: string
                description: 카드 별명(최대 20자리)을 입력합니다.
                example: "황금별의 황금카드"
              cardNumber:
                type: string
                description: 마스킹 된 카드 번호
                example: "1234-1234-3210-3210"

    User:
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
              - birthDate
              - gender
              - phoneNumber
            properties:
              email:
                type: string
                example: kkamikoon@gmail.com
                description: 아이디로 사용할 Email을 입력합니다.
              password:
                type: string
                example: testtest
                description: 비밀번호를 입력합니다.
              birthDate:
                type: string
                example: 19940101
                description: 태어난 생년월일을 기입하며 형태는 `YYYYMMDD` 입니다.
              gender:
                type: string
                example: 'female'
                description: 성별을 나타내는 문자열이 들어갑니다. (male/female)
              phoneNumber:
                type: string
                example: "01012341234"
  schemas:
    CardDetail:
      allOf:
        - $ref: "#components/schemas/Card"
        - type: object
          properties:
            alias:
              type: string
              description: 카드 별명
              example: "황금별의 황금카드"
            cardKey:
              type: string
              format: uuid
              description: 카드를 특정할 수 있는 고유 아이디 값
              example: ef4de7b28f214fcfac8ee5d1c8261b20
            cardName:
              type: string
              description: 카드 이름
              example: "KB국민카드"

    Card:
      type: object
      properties:
        id:
          type: integer
          description: 카드의 고유 아이디 값
        status:
          type: boolean
          enum:
          - true
          - false
          description: 카드 상태 (0 비활성, 1 활성 )
        cardNumber:
          type: string
          description: 마스킹 된 카드 번호
          example: "1234-****-****-*210"
        createdAt:
          type: string
          format: date-time
          description: 카드 정보가 생성된 날짜
        updatedAt:
          type: string
          format: date-time
          description: 카드 정보가 업데이트된 날짜

    Cards:
      properties:
        links:
          type: object
          required:
            - next
            - prev
          properties:
            next:
              type: string
              description: 다음 페이지 링크
              example: "https://dev.api.0x10.kr/api/v1/users?page=3"
            prev:
              type: string
              description: 이전 페이지 링크
              example: "https://dev.api.0x10.kr/api/v1/users?page=1"
        count:
          type: integer
          format: int32
          example: 195
          description: 전체 query 기준 데이터 개수
        page:
          type: integer
          format: int32
          example: 2
          description: 현재 페이지
        pageSize:
          type: integer
          format: int16
          example: 20
          description: "한 페이지당 페이지 개수(현재 설정한 기준, default: 20)"
        totalPages:
          type: integer
          format: int64
          example: 10
          description: 전체 페이지 수 int(pageSize/count)
        data:
          type: array
          maxItems: 20
          description: 현재 로드된 데이터 목록
          items:
            allOf:
              - $ref: "#components/schemas/Card"
              - type: object
                properties:
                  user:
                    type: integer
                    example: 1
                    description: 발급한 유저 아이디

    UserCards:
      properties:
        links:
          type: object
          required:
            - next
            - prev
          properties:
            next:
              type: string
              description: 다음 페이지 링크
              example: "https://dev.api.0x10.kr/api/v1/users?page=3"
            prev:
              type: string
              description: 이전 페이지 링크
              example: "https://dev.api.0x10.kr/api/v1/users?page=1"
        count:
          type: integer
          format: int32
          example: 195
          description: 전체 query 기준 데이터 개수
        page:
          type: integer
          format: int32
          example: 2
          description: 현재 페이지
        pageSize:
          type: integer
          format: int16
          example: 20
          description: "한 페이지당 페이지 개수(현재 설정한 기준, default: 20)"
        totalPages:
          type: integer
          format: int64
          example: 10
          description: 전체 페이지 수 int(pageSize/count)
        data:
          type: array
          maxItems: 20
          description: 현재 로드된 데이터 목록
          items:
            $ref: "#components/schemas/CardDetail"

    User:
      type: object
      required:
        - id
        - nickname
        - phoneNumber
        - gender
        - birthDate
        - email
        - isActive
        - createdAt
        - updatedAt
        - lastAccessed
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: 유저의 고유 아이디
        nickname:
          type: string
          description: 유저의 닉네임
          example: 황금별
        phoneNumber:
          type: string
          description: 휴대폰 번호
          example: "01012341234"
        gender:
          type: string
          description: 유저의 성별
          enum:
          - 'male'
          - 'female'
        birthDate:
          type: string
          example: 19940101
          description: 태어난 생년월일을 기입하며 형태는 `YYYYMMDD`
        email:
          type: string
          description: 유저의 이메일
          example: kkamikoon@gmail.com
        createdAt:
          type: string
          format: date-time
          description: 유저 계정이 생성된 날짜
        updatedAt:
          type: string
          format: date-time
          description: 유저 계정이 업데이트된 날짜
        lastAccessed:
          type: string
          format: date-time
          description: 마지막 접속 날짜

    Users:
      type: object
      required:
        - links
        - count
        - page
        - pageSize
        - totalPages
        - data
      properties:
        links:
          type: object
          required:
            - next
            - prev
          properties:
            next:
              type: string
              description: 다음 페이지 링크
              example: "https://dev.api.0x10.kr/api/v1/users?page=3"
            prev:
              type: string
              description: 이전 페이지 링크
              example: "https://dev.api.0x10.kr/api/v1/users?page=1"
        count:
          type: integer
          format: int32
          example: 195
          description: 전체 query 기준 데이터 개수
        page:
          type: integer
          format: int32
          example: 2
          description: 현재 페이지
        pageSize:
          type: integer
          format: int16
          example: 20
          description: "한 페이지당 페이지 개수(현재 설정한 기준, default: 20)"
        totalPages:
          type: integer
          format: int64
          example: 10
          description: 전체 페이지 수 int(pageSize/count)
        data:
          type: array
          maxItems: 20
          description: 현재 로드된 데이터 목록
          items:
            $ref: "#components/schemas/User"

    UserWithCard:
      $ref: "#components/schemas/User"
      type: object
      properties:
        card:
          $ref: "#components/schemas/CardDetail"
          description: 현재 활성화 돼 있는 카드 정보를 반환합니다. 만약 카드가 없을 경우 null 값이 반환됩니다.
          type: object

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: 에러 코드
          example: "ERROR-FOUND"
        message:
          type: string
          description: 에러에 대한 상세 메시지
          example: "에러메시지 입니다."
